name: Create release tag and release note.

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        type: choice
        description: 'Select the version type to bump'
        options:
          - major
          - minor
          - patch
        required: true

jobs:
  create-release-tag:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TZ: 'Asia/Tokyo'

    steps:
      - uses: actions/checkout@v2

      # 前回のリリースタグを取得する
      - name: Get previous tag
        id: pre_tag
        run: |
          echo "::set-output name=pre_tag::$(curl -H 'Accept: application/vnd.github.v3+json' -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)"

      # タグを生成する
      - name: Generate release tag
        id: release_tag
        run: |
          set -e

          input_version="${{ github.event.inputs.version }}"
          echo "input version: $input_version"

          # 前回のタグを取得して表示
          pre_tag="${{ steps.pre_tag.outputs.pre_tag }}"
          echo "Previous tag: $pre_tag"
          
          # "v"を取り除いてバージョン番号を抽出
          pre_tag="${pre_tag//v/}"
          IFS='.' read -r -a version <<< "$pre_tag"
          
          # 抽出したバージョン番号を表示
          echo "Extracted version: ${version[@]}"

          # バージョンアップのタイプを決定
          case $input_version in
            'major')
              ((version[0]=version[0]+1))
              version[1]=0
              version[2]=0
              ;;
            'minor')
              ((version[1]=version[1]+1))
              version[2]=0
              ;;
            'patch')
              ((version[2]=version[2]+1))
              ;;
          esac
      
          # 新しいタグを生成
          new_tag="v${version[0]}.${version[1]}.${version[2]}"
      
          # 生成した新しいタグを表示する
          echo "New tag: $new_tag"
      
          # 出力に新しいタグをセット
          echo "::set-output name=release_tag::$new_tag"

      # 現在の日付を取得しyyyymmdd形式に変換する
      - name: Get current date
        id: current_date
        run: echo "CURRENT_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      # 同日のリリースカウントを取得
      - name: Get today's release count
        id: release_count
        run: |
          # 最新のリリースノートのタイトルを取得
          LATEST_RELEASE_TITLE=$(gh api repos/$GITHUB_REPOSITORY/releases/latest --jq '.name')
          echo "Latest release title: $LATEST_RELEASE_TITLE"
        
          # タイトルを'-'で分割し、日付部分を取得
          IFS='-' read -ra ADDR <<< "$LATEST_RELEASE_TITLE"
          LATEST_RELEASE_DATE="${ADDR[1]}"
          echo "Latest release date: $LATEST_RELEASE_DATE"
        
          # 日付の比較とカウントの設定
          if [[ "$LATEST_RELEASE_DATE" == "${{ env.CURRENT_DATE }}" ]]; then
            # タイトルの末尾からカウントを抽出してインクリメント
            COUNT=$((${ADDR[2]} + 1))
          else
            COUNT=1
          fi
          echo "Release count: $COUNT"
          echo "RELEASE_COUNT=$COUNT" >> $GITHUB_ENV

      # リリースノートの本文を生成し、リリースを作成する
      - name: Create and Publish GitHub Release
        run: |
          RELEASE_NOTES=$(gh release generate-notes --tag ${{ steps.release_tag.outputs.release_tag }} --previous-tag ${{ steps.pre_tag.outputs.pre_tag }})
          gh release create ${{ steps.release_tag.outputs.release_tag }} \
            --title "naikist-${{ env.CURRENT_DATE }}-${{ env.RELEASE_COUNT }}" \
            --notes "$RELEASE_NOTES"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}