name: Create release tag and release note.

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        type: choice
        description: 'Select the version type to bump'
        options:
          - major
          - minor
          - patch
        required: true

jobs:
  create-release-tag:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TZ: 'Asia/Tokyo'

    steps:
      - uses: actions/checkout@v2

      # 前回のりリースタグを取得する
      - name: Get previous tag
        id: pre_tag
        run: |
          echo "::set-output name=pre_tag::$(curl -H 'Accept: application/vnd.github.v3+json' -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)"

      # タグを生成する
      - name: Generate release tag
        id: release_tag
        run: |
          set -e

          input_version="${{ github.event.inputs.version }}"
          echo "input version: $input_version"

          # 前回のタグを取得して表示
          pre_tag="${{ steps.pre_tag.outputs.pre_tag }}"
          echo "Previous tag: $pre_tag"
          
          # "v"を取り除いてバージョン番号を抽出
          pre_tag="${pre_tag//v/}"
          IFS='.' read -r -a version <<< "$pre_tag"

          echo ${version[1]}
          echo ${version[2]}
          
          # 抽出したバージョン番号を表示
          echo "Extracted version: ${version[@]}"

          # バージョンアップのタイプを決定
          case $input_version in
            'major')
              ((version[0]++))
              version[1]=0
              version[2]=0
              ;;
            'minor')
              ((version[1]++))
              version[2]=0
              ;;
            'patch')
              ((version[2]++))
              ;;
          esac
      
          # 新しいタグを生成
          new_tag="v${version[0]}.${version[1]}.${version[2]}"
      
          # 生成した新しいタグを表示する
          echo "New tag: $new_tag"
      
          # 出力に新しいタグをセット
          echo "::set-output name=release_tag::$new_tag"

      # 現在の日付を取得しyyyymmdd形式に変換する
      - name: Get current date
        id: current_date
        run: echo "CURRENT_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      # Notionからリリースノート情報を取得する
      - name: Get data from Notion
        run: |
          CURRENT_MILESTONE="naikist-${{ env.CURRENT_DATE }}"
          RESPONSE=$(curl -X POST 'https://api.notion.com/v1/databases/b76806a2a57c47a3ad8062beaf7a5591/query' \
            -H 'Authorization: Bearer ${{ secrets.NOTION_TOKEN }}' \
            -H 'Content-Type: application/json' \
            -H 'Notion-Version: 2022-06-28' \
            --data '{
              "filter": {
                "property": "マイルストーン",
                "select": {
                  "equals": "'"$CURRENT_MILESTONE"'"
                }
              }
            }')
          echo "::set-output name=notion_response::$RESPONSE"
        id: notion_data

      # リリースノートの本文を生成する
      - name: Generate release notes
        id: release_notes
        run: |
          RELEASE_NOTES="修正内容\n"
          JSON_DATA='${{ steps.notion_data.outputs.notion_response }}'
          while IFS= read -r line; do
            RELEASE_NOTES+="$line\n"
          done < <(echo $JSON_DATA | jq -r '.results[] | "- " + .properties.Lenear.rich_text[0].plain_text + " " + .properties.Name.title[0].plain_text')
      
          # 環境ファイルを使用して環境変数を設定
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo -e "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # タグを切り、リリースノートを作成する
      - name: Create GitHub Release
        run: |
          gh release create ${{ steps.release_tag.outputs.release_tag }} \
            --title "naikist-${{ env.CURRENT_DATE }}" \
            --notes "$RELEASE_NOTES"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}